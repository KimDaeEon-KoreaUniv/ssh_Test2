코드 수정하거나 문제 해결할 때, 코드 짤 때, 디버그 할 때, 코드 찾을 때, 코드 분석할 때 염두할 사항들
기본 자세
지금보다 채팅이든 말이든 대처든 1.5배 정도 더 느리게 생각하면서 하자. 채팅 아까 오타 너무 많이 쳤다..

코드 수정하거나 문제 해결 할 때에 기억해 둘 것들
0. 로컬 서버에서 테스트할 수 있는 경우라면 웬만하면 로컬에서 쏴보면서 해결하자.

1. 코드 수정 후 문제가 터진 경우
딴 사람이 내 코드를 건든 것이 아닌 이상, 내가 수정한 코드에서 문제가 발생한다. REDIS 에 expire time 설정 안해서 3시간 날린 것 잊지 말자.

2. 코드를 옮기는 경우
region이나 class로 묶여 있으면 접어서 한 번에 옮기자..
이거 제대로 안해서 훅 갈 뻔했다..

3. 칼럼 값을 고치는 경우
0) 일단 로컬 서버로 1)~3)을 수행한다.
1) ORM이 있다면, ORM의 칼럼 값을 수정한다.
2) 기존 ORM의 칼럼 값으로 사용되던 요소들이 붙어 있는 액션을 수정한다. (Dict key로 'key' 형식일 수도 있고, 그냥 ORM.key 형식일 수도 있다.)
3) 또 이녀석을 사용하는 HTML, CSS, PHP, JavaScript 등이 있다면 수정한다.
4) 마지막으로 실제 DB의 칼럼값을 바꾼다. 그래야 현재 작동시키고 있는 클라이언트에 에러가 안터진다.

4. 클라에서 액션 결과를 제대로 받지 못할 경우
0) 로컬 서버를 킨다.

1) 클라이언트에 리퀘스트 요청 변수를 받는다.

2) 해당 내용을 로컬 서버에 쏴보면서 에러를 확인해본다.

3) 문제를 해결한 후에 실제 서버에 반영한다.


5. 다른 분의 코드를 보면서 내 코드를 수정하는 경우
다른 코드를 잘 짜시는 분의 코드를 보고 수정을 할 때에는, 내 코드를 보지말고 잘 짜신 분의 코드를 집중해서 분석해서 충분히 이해하고 내 코드에서 문제를 해결할 때에 적용시켜야 한다. 답 없는 내 코드를 보고 있어봤자 답이 안나온다.



코드 짤 때에 기억해둘 것들
0. '변화하는 값'이 무엇인지 알고, 그것을 중심으로 생각하자. 

1. 내가 만드는 기능들은 실제 사용자가 어떻게 사용하고 행동할 지 work_flow를 최대한 자세히 그려보자. 이것을 기반으로 모든 액션과 데이터 구조가 나오는 것이다. 사람의 행동이 내 데이터와 액션을 좌우한다. 잊지 말자.

2. 코드를 짤 때에 아래의 순서를 거치자
0) 항상 누가 내 코드를 검사한다고 생각하고 코딩을 하자. 그래야 코딩에서 실수나 필요없는 과정이 줄어든다.
1) 비슷한 코드를 찾아본다.
2) 없거나 충분치 못하면 만들려는 기능이, 언제, 어디서, 누가, 무엇을, 어떻게 쓰는지 명확히 규정하자. 그리고 그러한 구체화한 내용을 메모장에 다 적자. Work Flow를 적는 것이 중요하다. 
3) 고민하다가 머리가 안돌아가면 나가서 바람을 쐬거나 걷자. 어차피 앉아 있어봤자 코딩이 안된다.
4) 위의 과정을 거쳤는데도 모르겠으면 나보다 잘 알고 현재 한가하신 분에게 질문을 하자.
5) 다 짜고 나면 if 문 범위를 벗어나지는 않았는지, 변수 입력 중에 빼먹은 것은 없는지 확인하자.

3. 랭킹 기능 같은 경우 랭킹 점수가 변화하는 시점을 정확히 아는 부분에서 랭킹을 갱신하자. 그렇지 않으면 괜히 초기화를 하면서 메모리를 낭비한다.

디버그 할 때에 기억해둘 것들
0. 거의 대부분 에러의 문제는 '할당되어야 할 값'이 할당되지 않아서 발생한다. 할당되어야 할 값이 어디서 할당되는지, 잘 할당되었는지를 알아보는 능력이 제일 중요하다.

1. RequestContext.player_id가 할당이 안되었으면 ReqeustContext.player_id = <- 이런 식으로 검색을 하면 쉽게 어디서 할당이 되는지 알아볼 수 있다.

코드에서 원하는 기능을 찾을 때 또는 어디서 사용되는지 보려 할 경우
1. Find Usage(Alt + F7)를 활용하자.
2. Ctrl+Shift+F 를 활용하자.

코드 분석 시 참고
1. 코드에서 사용되는 데이터 테이블부터 본다.

2. 게임을 해보면서 해당 데이터가 어떤 항목인지 확인하고, 헷갈리는 부분들은 다시 데이터 테이블을 보며 데이터 구조에 대해 완전히 이해한다. 이 과정에서 이 데이터가 어떻게 쓰여지겠구나 라는 대체적인 윤곽이 나와야 한다.

3. 데이터 구조에 대한 이해가 끝났으면 이것이 어떻게 기능을 구현하는데 사용되었는지 본다. 사용자가 이 기능을 사용하는 흐름을 생각하면서 분석하면 더더욱 확실히 이해가 된다.